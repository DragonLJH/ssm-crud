<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!--数据源、mapper.xml -->

	<!--数据源 -->
	<!-- org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer用来加载配置文件所需要的类 -->
	<!--加载 db.properties -->
	<bean id="config"
		class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
		<!-- locations（ 数组类型 ）存放加载配置文件的路径 -->
		<property name="locations">
			<array>
				<value>classpath:db.properties</value>
			</array>
		</property>
	</bean>
	<!--加载 db.properties -->
	<!-- <context:property-placeholder location="classpath:db.properties" /> -->

	<!--=======================配置数据库信息================================ -->
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${driver}"></property>
		<property name="url" value="${url}"></property>
		<property name="username" value="${username}"></property>
		<property name="password" value="${password}"></property>
	</bean>

	<!--mapper.xml -->

	<!--在SpringIOC容器中创建mybatis的核心类SqlSessionFactory -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--添加数据源 -->
		<property name="dataSource" ref="dataSource"></property>

		<!--pojo位置 -->
		<property name="typeAliasesPackage" value="dragon.bean"></property>
		<!--加载mybatis配置文件 -->
		<!-- <property name="configLocation" value="classpath:conf.xml"></property> -->
		<!--直接加载mapper文件 -->
		<property name="mapperLocations"
			value="classpath:mapper/*.xml"></property>

		<!-- 注意其他配置 -->
		<!--配置分页插件 -->
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<!-- <property name="properties"> 使用下面的方式配置参数，一行配置一个 <value> params=value1 
						</value> </property> -->
				</bean>
			</array>
		</property>
	</bean>


	<!--============================= Spring 整合Mybatis =============================== -->
	<!--将mybatis的核心类SqlSessionFactory交给Spring整合 -->

	<!-- 第三种方法生成Mapper对象：批量产生 约定：mapper包里的mapper(首字母小写的接口名) -->
	<bean id="mappers"
		class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName"
			value="sqlSessionFactory"></property>
		<property name="basePackage" value="dragon.dao"></property>

		<!--上面basePackage 所在的property的作用 将dragon.dao包中，所有的接口 产生动态代理对象 （对象名就是首字母小写的 
			接口名）：UserMapper.方法 -->
	</bean>


	<!--=======================配置一个可以执行批量的sqlsession===================== -->

	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory"
			ref="sqlSessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>

	<!--配置分页插件 -->
	<!-- <bean id="pageHelper" class="org.mybatis.spring.SqlSessionFactoryBean"> 
		注意其他配置 <property name="plugins"> <array> <bean class="com.github.pagehelper.PageInterceptor"> 
		<property name="properties"> 使用下面的方式配置参数，一行配置一个 <value> params=value1 </value> 
		</property> </bean> </array> </property> </bean> -->



	<!--==================== 事务控制的配置 ================================== -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 控制住数据源 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!--开启基于注解的事务，使用xml配置形式的事务（必要主要的都是使用配置式） -->
	<aop:config>
		<!-- 切入点表达式 -->
		<aop:pointcut
			expression="execution(* dragon.service..*(..))" id="txPonit" />
		<!-- 配置事务增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPonit" />
	</aop:config>

	<!-- 配置事务增强 、事务如何切入 -->
	<tx:advice id="txAdvice">
		<tx:attributes>
			<!-- 所有方法都是事务方法 -->
			<tx:method name="*" />
		</tx:attributes>

	</tx:advice>



	<!-- -->
	<bean id="employeeService" class="dragon.service.EmployeeService">
		<property name="employeeMapper" ref="employeeMapper"></property>
	</bean>

	<bean id="employeeController" class="dragon.controller.EmployeeController">
		<property name="employeeService" ref="employeeService"></property>
	</bean>




</beans>
